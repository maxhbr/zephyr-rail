#!/usr/bin/env bash
#
# is it best run via:
# $ nix run .#init

set -euo pipefail

go_to_root_of_git() {
    local root
    root=$(git rev-parse --show-toplevel)
    echo "INFO: Changing to git root: $root" >&2
    cd "$root"
}

nix_flake_update() {
    echo "INFO: Updating flake inputs"
    old_hash_of_lockfile=$(sha256sum flake.lock | awk '{print $1}')
    nix flake update
    new_hash_of_lockfile=$(sha256sum flake.lock | awk '{print $1}')
    if [ "$old_hash_of_lockfile" != "$new_hash_of_lockfile" ]; then
        echo "WARN: flake.lock changed, bail out, please rerun"
        exit 1
    fi
}

get_zephyr() {
    parameter="$1"
    jq -r '.nodes.zephyr.original.'"$parameter" <flake.lock
}

get_zephyr_ref() {
    get_zephyr "ref"
}

get_zephyr_remote() {
    get_zephyr "owner"
}

get_zephyr_name() {
    get_zephyr "repo"
}

compare_and_replace_generated_and_old() {
    local generated="$1"
    local old="$2"
    local code=0
    if ! cmp -s "$generated" "$old"; then
        echo "INFO: $old changed"
        diff "$old" "$generated"
        code=1
        mv "$generated" "$old"
    else
        rm "$generated"
    fi
    return $code
}

generate_west_yml() {
    local remote name ref
    remote="$1"
    name="$2"
    ref="$3"
    echo "INFO: Generating west.yml for ${remote}/${name} @ ${ref}"
    cat <<EOF >app/.tmp.west.yml
# Auto-generated by init.sh, Do not edit!
manifest:
  defaults:
    remote: ${remote}
  remotes:
    - name: ${remote}
      url-base: https://github.com/${remote}
  projects:
    - name: ${name}
      remote: ${remote}
      revision: ${ref}
      clone-depth: 1
      import: true
  self:
    path: app
EOF
    compare_and_replace_generated_and_old app/.tmp.west.yml app/west.yml
}

west_init_once() {
    if [ ! -d .west ]; then
        echo "INFO: Initializing west"
        west init -l app
    else
        echo "INFO: West already initialized"
    fi
}

west_update_if_was_not_updated_already_today() {
    local stamp_file
    stamp_file=".west/last_update_stamp"
    if [ -f "$stamp_file" ]; then
        if [ "$(date -r "$stamp_file" +%Y-%m-%d)" = "$(date +%Y-%m-%d)" ]; then
            echo "INFO: West was already updated today"
            return
        fi
    fi
    echo "INFO: Updating west"
    west update --narrow
    touch "$stamp_file"
}

regenerate_mermaid_svg() {
    echo "INFO: Regenerating mermaid SVG"
    mmdc -i - -o app/.tmp.mermaid.StateMachine.svg -t neutral -b transparent <app/mermaid.StateMachine.mmd
    compare_and_replace_generated_and_old app/.tmp.mermaid.StateMachine.svg app/mermaid.StateMachine.svg
}

main() {
    go_to_root_of_git

    local headless="false"
    local chores="true"
    local fail_if_out_of_sync="false"
    if [[ $# -gt 0 && $1 == "--ci" ]]; then
        shift
        chores="false"
        fail_if_out_of_sync="true"
        headless="true"
    elif [[ $# -gt 0 && $1 == "--init-only" ]]; then
        chores="false"
        fail_if_out_of_sync="false"
    fi

    if [[ $chores == "true" ]]; then
        nix_flake_update
    fi

    if [[ $chores == "true" ]]; then
        echo "INFO: Running nix fmt"
        nix fmt
    fi

    local remote name ref
    remote=$(get_zephyr_remote)
    name=$(get_zephyr_name)
    ref=$(get_zephyr_ref)
    if ! generate_west_yml "$remote" "$name" "$ref" && [[ $fail_if_out_of_sync == "true" ]]; then
        echo "ERROR: west.yml was out of sync"
        exit 1
    fi

    west_init_once
    west_update_if_was_not_updated_already_today

    if [[ $headless == "false" ]]; then
        if ! regenerate_mermaid_svg && [[ $fail_if_out_of_sync == "true" ]]; then
            echo "ERROR: mermaid SVG was out of sync"
            exit 1
        fi
    fi
}

main "$@"
